EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
menu with sounds.bin -- emu8086 assembler version: 4.08  
 
[ 06/06/2016  --  20:44:27 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       org 7e10h
[   2]        :                                       
[   3]        :                                       
[   4]        :                                       ;Main Menu
[   5]        :                                       ;Use F1, F2, F3 to select the mode
[   6]        :                                       ;Escape to quit program
[   7]    0000:                                       main:
[   8]        :                                       ; print the menu
[   9]    0000: ??                                    call refresh
[  10]    0003: ??                                    mov al, ' ' ; character to print
[  11]    0005: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[  12]    0007: ??                                    mov bh, 0 ; print on  page 1
[  13]    0009: ??                                    mov cx, 4000 ; number of character to print
[  14]    000C: ??                                    mov ah, 9 ; prepare interruption
[  15]    000E: ??                                    int 10h
[  16]    0010: ??                                    mov al, 1
[  17]    0012: ??                                    mov bh, 0
[  18]    0014: ??                                    mov bl, 0000_1011b ; choose the color
[  19]    0016: ??                                    mov cx, msg1end - offset msg1 ; calculate message size.
[  20]    0019: ??                                    mov dl, 30; select the column where to print the message
[  21]    001B: ??                                    mov dh, 0 ; select the row
[  22]    001D: ??                                    mov bp, offset msg1; select the string to be print
[  23]    0020: ??                                    mov ah, 13h ; print the string pointed by es:bp
[  24]    0022: ??                                    int 10h
[  25]        :                                       	; don't need to change ah value, so we are doing exactly the same thing
[  26]    0024: ??                                    mov cx, menu1end - offset menu1 ; calculate message size.
[  27]    0027: ??                                    mov dl, 3
[  28]    0029: ??                                    mov dh, 3
[  29]    002B: ??                                    mov bp, offset menu1
[  30]    002E: ??                                    int 10h
[  31]        :                                       	
[  32]    0030: ??                                    mov cx, menu2end - offset menu2 ; calculate message size.
[  33]    0033: ??                                    mov dh, 5
[  34]    0035: ??                                    mov bp, offset menu2
[  35]    0038: ??                                    int 10h
[  36]        :                                       	
[  37]    003A: ??                                    mov cx, menu3end - offset menu3; calculate message size.
[  38]    003D: ??                                    mov dh, 7
[  39]    003F: ??                                    mov bp, offset menu3
[  40]    0042: ??                                    int 10h
[  41]        :                                       	
[  42]    0044: ??                                    mov cx, menu4end - offset menu4; calculate message size.
[  43]    0047: ??                                    mov dh, 11
[  44]    0049: ??                                    mov bp, offset menu4
[  45]    004C: ??                                    int 10h
[  46]        :                                       
[  47]    004E: ??                                    mov cx, menu5end - offset menu5; calculate message size.
[  48]    0051: ??                                    mov dh, 14
[  49]    0053: ??                                    mov dl, 0
[  50]    0055: ??                                    mov bp, offset menu5
[  51]    0058: ??                                    int 10h
[  52]        :                                       	
[  53]    005A: ??                                    mov ah, 0
[  54]    005C: ??                                    int 16h
[  55]    005E: ??                                    cmp ah, 1
[  56]    0061: ??                                    je fin
[  57]    0063: ??                                    cmp ah, 3Bh
[  58]    0066: ??                                    je ftp
[  59]    0068: ??                                    cmp ah, 3Ch
[  60]    006B: ??                                    je pap
[  61]    006D: ??                                    cmp ah, 3Dh
[  62]    0070: ??                                    je wmp
[  63]    0075: ??                                    jne main
[  64]        :                                       
[  65]        :                                       
[  66]    0077:                                       fin:
[  67]    0077: ??                                    int 20h
[  68]        :                                       
[  69]    0079:                                       ftp:
[  70]    0079: ??                                    call refresh
[  71]    007C: ??                                    mov al, ' ' ; character to print
[  72]    007E: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[  73]    0080: ??                                    mov bh, 0 ; print on  page 1
[  74]    0082: ??                                    mov cx, 4000 ; number of character to print
[  75]    0085: ??                                    mov ah, 9 ; prepare interruption
[  76]    0087:                                       press_key:
[  77]    0087: ??                                    call print_piano
[  78]    008A: ??                                    mov ah, 0
[  79]    008C: ??                                    int 16h ; wait for a pressed key
[  80]    008E: ??                                    mov bx, offset pressed_key
[  81]    0091: ??                                    cmp ah, 1 ; escape pressed, we quit the program
[  82]    0094: ??                                    je end_free
[  83]    0096: ??                                    sub ah, 10h
[  84]    0099: ??                                    cmp ah, 12
[  85]    009C: ??                                    jge press_key ;user doesn't press the right key
[  86]    009E: ??                                    mov [bx], ah
[  87]    00A0: ??                                    call print_piano
[  88]    00A3: ??                                    	call play_sound_freq
[  89]    00A6: ??                                    jmp press_key
[  90]    00A8:                                       end_free:
[  91]    00A8: ??                                    jmp main
[  92]        :                                       
[  93]    00AB:                                       pap:
[  94]    00AB: ??                                    call refresh
[  95]    00AE: ??                                    mov al, ' ' ; character to print
[  96]    00B0: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[  97]    00B2: ??                                    mov bh, 0 ; print on  page 1
[  98]    00B4: ??                                    mov cx, 4000 ; number of character to print
[  99]    00B7: ??                                    mov ah, 9 ; prepare interruption
[ 100]    00B9:                                       menupap:
[ 101]    00B9: ??                                    mov al, 1
[ 102]    00BB: ??                                    mov bh, 0
[ 103]    00BD: ??                                    mov bl, 0000_1111b ; choose the color
[ 104]    00BF: ??                                    mov cx, pap1end - offset pap1 ; calculate message size.
[ 105]    00C2: ??                                    mov dl, 25; select the column where to print the message
[ 106]    00C4: ??                                    mov dh, 0 ; select the row
[ 107]    00C6: ??                                    mov bp, offset pap1; select the string to be print
[ 108]    00C9: ??                                    mov ah, 13h ; print the string pointed by es:bp
[ 109]    00CB: ??                                    int 10h
[ 110]    00CD: ??                                    mov cx, pap2end - offset pap2 ; calculate message size.
[ 111]    00D0: ??                                    mov dl, 3
[ 112]    00D2: ??                                    mov dh, 3
[ 113]    00D4: ??                                    mov bp, offset pap2
[ 114]    00D7: ??                                    int 10h
[ 115]    00D9: ??                                    mov cx, pap3end - offset pap3 ; calculate message size.
[ 116]    00DC: ??                                    mov dh, 5
[ 117]    00DE: ??                                    mov bp, offset pap3
[ 118]    00E1: ??                                    int 10h
[ 119]    00E3: ??                                    mov cx, pap4end - offset pap4 ; calculate message size.
[ 120]    00E6: ??                                    mov dh, 7
[ 121]    00E8: ??                                    mov bp, offset pap4
[ 122]    00EB: ??                                    int 10h
[ 123]    00ED: ??                                    mov ah, 0
[ 124]    00EF: ??                                    int 16h ;menu "Pick a song"
[ 125]    00F1: ??                                    cmp ah, 3Bh
[ 126]    00F4: ??                                    jne other1
[ 127]    00F6: ??                                    mov bx, offset piece
[ 128]    00F9: ??                                    push bx
[ 129]    00FA: ??                                    je play
[ 130]    00FC:                                       other1:
[ 131]    00FC: ??                                    cmp ah, 1h
[ 132]    00FF: ??                                    jne other2
[ 133]    0101: ??                                    jmp main
[ 134]    0104:                                       other2:
[ 135]    0104: ??                                    jmp menupap ; if invalid key, wait for a valid one
[ 136]        :                                       ;piano plays with azertyuiop^$
[ 137]    0106:                                       play:
[ 138]    0106: ??                                    call refresh
[ 139]    0109: ??                                    call print_piano
[ 140]    010C: ??                                    pop bx
[ 141]    010D:                                       beginp:
[ 142]    010D: ??                                    mov cl, 11
[ 143]    010F:                                       press_key1:
[ 144]    010F: ??                                    cmp [bx], 13
[ 145]    0112: ??                                    je end_play
[ 146]    0114: ??                                    cmp [bx], cl
[ 147]    0116: ??                                    jne next
[ 148]    0118: ??                                    mov al, cl
[ 149]    011A: ??                                    mov dl, 6
[ 150]    011C: ??                                    mul dl
[ 151]    011E: ??                                    push bx
[ 152]    011F: ??                                    push cx
[ 153]    0120: ??                                    call print_next
[ 154]    0123: ??                                    pop cx
[ 155]    0124: ??                                    pop bx
[ 156]    0125:                                       next:
[ 157]    0125: ??                                    cmp cl, 0
[ 158]    0128: ??                                    je piano
[ 159]    012A: ??                                    dec cl
[ 160]    012C: ??                                    jmp press_key1
[ 161]    012E:                                       piano:
[ 162]    012E: ??                                    mov ah, 0
[ 163]    0130: ??                                    int 16h ; wait for a pressed key
[ 164]    0132: ??                                    push bx
[ 165]    0133: ??                                    mov bx, offset pressed_key
[ 166]    0136: ??                                    cmp ah, 1 ; escape pressed, we quit the program
[ 167]    0139: ??                                    je end_play
[ 168]    013B: ??                                    sub ah, 10h
[ 169]    013E: ??                                    mov [bx], ah
[ 170]    0140: ??                                    call print_piano
[ 171]    0143: ??                                    call play_sound_freq
[ 172]    0146: ??                                    pop bx
[ 173]    0147: ??                                    inc bx
[ 174]    0148: ??                                    jmp beginp
[ 175]    014A:                                       end_play:
[ 176]    014A: ??                                    jmp main
[ 177]        :                                       
[ 178]    014D:                                       wmp:
[ 179]        :                                       ;call watch_me_play ; doesn't exist for now
[ 180]    014D: ??                                    jmp main
[ 181]        :                                       
[ 182]    0150: ??                                    color db 00001111b
[ 183]    0151: ??                                    column db 0 ; must change value in code to display other touch
[ 184]    0152: ??                                    row db 0
[ 185]    0153: ??                                    key_off db 0
[ 186]    0154: ??                                    pressed_key db 12h
[ 187]    0155: ??                                    frequency dw 12h
[ 188]    0157: ??                                    next_key db 12h
[ 189]    0158: ??                                    piece db 5,5,5,7,9,7,5,9,7,7,5,5,5,5,7,9,7,5,9,7,7,5,7,7,7,7,2,2,7,5,4,2,0,5,5,5,7,9,7,5,9,7,7,5,13
[ 190]    0185:                                       refresh PROC
[ 191]        :                                       ;use to make the screen white
[ 192]    0185: ??                                    mov cl, 26
[ 193]    0187: ??                                    xor bx, bx ;put bx to 0
[ 194]    0189:                                       rowr:
[ 195]    0189: ??                                    dec cl
[ 196]    018B: ??                                    mov dh, cl
[ 197]    018D: ??                                    mov dl, 0
[ 198]    018F: ??                                    mov ah, 2
[ 199]    0191: ??                                    int 10h
[ 200]    0193: ??                                    mov al, ' ' ; character to print
[ 201]    0195: ??                                    push cx
[ 202]    0196: ??                                    mov cx, 80 ; number of character to print
[ 203]    0199: ??                                    mov ah, 9 ; prepare interruption
[ 204]    019B: ??                                    int 10h
[ 205]    019D: ??                                    pop cx
[ 206]    019E: ??                                    cmp cl, 0
[ 207]    01A1: ??                                    jne rowr
[ 208]    01A3: ??                                    ret
[ 209]        :                                       refresh ENDP
[ 210]        :                                       
[ 211]    01A4:                                       print_next PROC
[ 212]    01A4: ??                                    mov dl, al ;set the cursor position on the column
[ 213]    01A6: ??                                    mov dh, 14
[ 214]    01A8: ??                                    mov bh, 0 ; change page's 1 cursor
[ 215]    01AA: ??                                    mov ah, 2 ; prepare interruption
[ 216]    01AC: ??                                    int 10h ; change cursor position
[ 217]    01AE: ??                                    mov al, '-' ; character to print
[ 218]    01B0: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 219]    01B2: ??                                    mov bh, 0 ; print on  page 1
[ 220]    01B4: ??                                    mov cx, 6 ; number of character to print
[ 221]    01B7: ??                                    mov ah, 9 ; prepare interruption
[ 222]    01B9: ??                                    int 10h ; printing
[ 223]    01BB: ??                                    ret
[ 224]        :                                       print_next ENDP
[ 225]        :                                       
[ 226]    01BC:                                       print_piano PROC
[ 227]    01BC: ??                                    call refresh
[ 228]    01BF: ??                                    mov bx, offset column
[ 229]    01C2: ??                                    mov [bx], 0
[ 230]    01C5: ??                                    mov bx, offset key_off
[ 231]    01C8: ??                                    mov [bx], 0; put the value to 0
[ 232]    01CB: ??                                    mov dx, 0000h
[ 233]    01CE: ??                                    mov bh, 0
[ 234]    01D0: ??                                    mov ah, 2
[ 235]    01D2: ??                                    int 10h ; puts the cursor on the first column, first row
[ 236]    01D4: ??                                    mov cx, 0; use as a counter
[ 237]    01D7:                                       key:
[ 238]    01D7: ??                                    mov bx, offset color
[ 239]    01DA: ??                                    mov [bx], 00001111b
[ 240]    01DD: ??                                    mov bx, offset row
[ 241]    01E0: ??                                    mov [bx], 0 ; restore the value of the row
[ 242]    01E3: ??                                    mov bx, offset pressed_key
[ 243]    01E6: ??                                    cmp [bx], cl
[ 244]    01E8: ??                                    jnz continue:
[ 245]    01EA: ??                                    mov bx, offset color
[ 246]    01ED: ??                                    mov [bx], 00001100b
[ 247]    01F0:                                       continue:
[ 248]    01F0: ??                                    push cx ; save the value of the counter
[ 249]    01F1: ??                                    mov bx, offset key_off
[ 250]    01F4: ??                                    mov dh, [bx]
[ 251]    01F6: ??                                    mov bx, offset column
[ 252]    01F9: ??                                    mov [bx], dh
[ 253]    01FB: ??                                    mov dl, [bx] ; look which key to print (by looking which offset of key we have)
[ 254]    01FD: ??                                    mov cx, 8
[ 255]    0200: ??                                    mov bx, offset row
[ 256]    0203: ??                                    mov dh, [bx] ; load cursor's row
[ 257]    0205: ??                                    mov bh, 0
[ 258]    0207: ??                                    mov ah, 2
[ 259]    0209: ??                                    int 10h ; move the cursor to print this key
[ 260]    020B: ??                                    mov al, '|' ; character to print
[ 261]    020D: ??                                    mov bx, offset color
[ 262]    0210: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 263]    0212: ??                                    mov bh, 0 ; print on  page 1
[ 264]    0214: ??                                    mov cx, 1 ; number of character to print
[ 265]    0217: ??                                    mov ah, 9 ; prepare interruption
[ 266]    0219: ??                                    int 10h ; printing
[ 267]    021B: ??                                    mov bx, offset column ; pick up the address of the column
[ 268]    021E: ??                                    inc [bx] ; add 1 to the column
[ 269]    0220: ??                                    mov dl, [bx] ;set the cursor position on the column
[ 270]    0222: ??                                    mov bh, 0 ; change page's 1 cursor
[ 271]    0224: ??                                    mov ah, 2 ; prepare interruption
[ 272]    0226: ??                                    int 10h ; change cursor position
[ 273]    0228: ??                                    mov al, ' '
[ 274]    022A: ??                                    mov bx, offset color
[ 275]    022D: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 276]    022F: ??                                    mov bh, 0 ; print on  page 1
[ 277]    0231: ??                                    mov cx, 4
[ 278]    0234: ??                                    mov ah, 9
[ 279]    0236: ??                                    int 10h
[ 280]    0238: ??                                    mov bx, offset column
[ 281]    023B: ??                                    add [bx], 4
[ 282]    023E: ??                                    mov dl, [bx]
[ 283]    0240: ??                                    mov bh, 0
[ 284]    0242: ??                                    mov ah, 2
[ 285]    0244: ??                                    int 10h
[ 286]    0246: ??                                    mov al, '|'
[ 287]    0248: ??                                    mov bx, offset color
[ 288]    024B: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 289]    024D: ??                                    mov bh, 0 ; print on  page 1
[ 290]    024F: ??                                    mov cx, 1
[ 291]    0252: ??                                    mov ah, 9
[ 292]    0254: ??                                    int 10h
[ 293]    0256: ??                                    mov cx, 12 ;use to loop
[ 294]    0259:                                       etiq:
[ 295]    0259: ??                                    mov bx, offset key_off
[ 296]    025C: ??                                    mov dh, [bx]
[ 297]    025E: ??                                    mov bx, offset column
[ 298]    0261: ??                                    mov [bx], dh
[ 299]    0263: ??                                    mov dl, [bx]
[ 300]    0265: ??                                    mov bx, offset row ;restore the value
[ 301]    0268: ??                                    inc [bx]
[ 302]    026A: ??                                    mov dh, [bx]
[ 303]    026C: ??                                    mov bh, 0
[ 304]    026E: ??                                    mov ah, 2
[ 305]    0270: ??                                    int 10h ;move cursor
[ 306]    0272: ??                                    push cx ; store cx (modified in function)
[ 307]    0273: ??                                    mov al, '|' ; character to print
[ 308]    0275: ??                                    mov bx, offset color
[ 309]    0278: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 310]    027A: ??                                    mov bh, 0 ; print on  page 1
[ 311]    027C: ??                                    mov cx, 1 ; number of character to print
[ 312]    027F: ??                                    mov ah, 9 ; prepare interruption
[ 313]    0281: ??                                    int 10h ; printing
[ 314]    0283: ??                                    mov bx, offset column ; pick up the address of the column
[ 315]    0286: ??                                    inc [bx] ; add 1 to the column
[ 316]    0288: ??                                    mov dl, [bx] ;set the cursor position on the column
[ 317]    028A: ??                                    mov bh, 0 ; change page's 1 cursor
[ 318]    028C: ??                                    mov ah, 2 ; prepare interruption
[ 319]    028E: ??                                    int 10h ; change cursor position
[ 320]    0290: ??                                    mov al, ' '
[ 321]    0292: ??                                    mov bx, offset color
[ 322]    0295: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 323]    0297: ??                                    mov bh, 0 ; print on  page 1
[ 324]    0299: ??                                    mov cx, 4
[ 325]    029C: ??                                    mov ah, 9
[ 326]    029E: ??                                    int 10h
[ 327]    02A0: ??                                    mov bx, offset column
[ 328]    02A3: ??                                    add [bx], 4
[ 329]    02A6: ??                                    mov dl, [bx]
[ 330]    02A8: ??                                    mov bh, 0
[ 331]    02AA: ??                                    mov ah, 2
[ 332]    02AC: ??                                    int 10h
[ 333]    02AE: ??                                    mov al, '|'
[ 334]    02B0: ??                                    mov bx, offset color
[ 335]    02B3: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 336]    02B5: ??                                    mov bh, 0 ; print on  page 1
[ 337]    02B7: ??                                    mov cx, 1
[ 338]    02BA: ??                                    mov ah, 9
[ 339]    02BC: ??                                    int 10h
[ 340]    02BE: ??                                    pop cx ;restore cx value
[ 341]    02BF: ??                                    dec cx
[ 342]    02C0: ??                                    cmp cx, 0
[ 343]    02C3: ??                                    jnz etiq ; loop while cx>0
[ 344]    02C5: ??                                    mov bx, offset key_off
[ 345]    02C8: ??                                    mov dh, [bx]
[ 346]    02CA: ??                                    mov bx, offset column
[ 347]    02CD: ??                                    mov [bx], dh
[ 348]    02CF: ??                                    mov dl, [bx]
[ 349]    02D1: ??                                    mov bx, offset row
[ 350]    02D4: ??                                    inc [bx]
[ 351]    02D6: ??                                    mov dh, [bx]
[ 352]    02D8: ??                                    mov bh, 0
[ 353]    02DA: ??                                    mov ah, 2
[ 354]    02DC: ??                                    int 10h  ; move cursor to the right position
[ 355]    02DE: ??                                    mov al, '-' ; character to print
[ 356]    02E0: ??                                    mov bx, offset color
[ 357]    02E3: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 358]    02E5: ??                                    mov bh, 0 ; print on  page 1
[ 359]    02E7: ??                                    mov cx, 6 ; number of character to print
[ 360]    02EA: ??                                    mov ah, 9 ; prepare interruption
[ 361]    02EC: ??                                    int 10h ; printing ; print end of the touch
[ 362]    02EE: ??                                    pop cx ; restore this value
[ 363]    02EF: ??                                    mov bx, offset key_off
[ 364]    02F2: ??                                    add [bx], 6 ; use to change key
[ 365]    02F5: ??                                    inc cx
[ 366]    02F6: ??                                    cmp cx, 12
[ 367]    02F9: ??                                    jnz key ;loop
[ 368]        :                                       
[ 369]    02FE: ??                                    mov dl, 0
[ 370]    0300: ??                                    mov dh, 14
[ 371]    0302: ??                                    mov bh, 0
[ 372]    0304: ??                                    mov ah, 2
[ 373]    0306: ??                                    int 10h  ; move cursor to the right position
[ 374]    0308: ??                                    mov al, ' ' ; character to print
[ 375]    030A: ??                                    mov bl, 0
[ 376]    030C: ??                                    mov bh, 0 ; print on  page 1
[ 377]    030E: ??                                    mov cx, 50h ; number of character to print
[ 378]    0311: ??                                    mov ah, 9 ; prepare interruption
[ 379]    0313: ??                                    int 10h ; printing
[ 380]    0315: ??                                    ret
[ 381]        :                                       print_piano ENDP
[ 382]        :                                       
[ 383]    0316:                                       play_sound_freq PROC
[ 384]    0316: ??                                    	mov bx, offset pressed_key
[ 385]    0319: ??                                    	cmp [bx], 0
[ 386]    031C: ??                                    	je freq_key_0
[ 387]    031E: ??                                    	cmp [bx], 1
[ 388]    0321: ??                                    	je freq_key_1
[ 389]    0323: ??                                    	cmp [bx], 2
[ 390]    0326: ??                                    	je freq_key_2
[ 391]    0328: ??                                    	cmp [bx], 3
[ 392]    032B: ??                                    	je freq_key_3
[ 393]    032D: ??                                    	cmp [bx], 4
[ 394]    0330: ??                                    	je freq_key_4
[ 395]    0332: ??                                    	cmp [bx], 5
[ 396]    0335: ??                                    	je freq_key_5
[ 397]    0337: ??                                    	cmp [bx], 6
[ 398]    033A: ??                                    	je freq_key_6
[ 399]    033C: ??                                    	cmp [bx], 7
[ 400]    033F: ??                                    	je freq_key_7
[ 401]    0341: ??                                    	cmp [bx], 8
[ 402]    0344: ??                                    	je freq_key_8
[ 403]    0346: ??                                    	cmp [bx], 9
[ 404]    0349: ??                                    	je freq_key_9
[ 405]    034B: ??                                    	cmp [bx], 10
[ 406]    034E: ??                                    	je freq_key_10
[ 407]    0350: ??                                    	cmp [bx], 11
[ 408]    0353: ??                                    	je freq_key_11
[ 409]    0355: ??                                    jmp ply_snd
[ 410]        :                                       
[ 411]    0357:                                       	freq_key_0:
[ 412]    0357: ??                                    	   mov bx, offset frequency
[ 413]    035A: ??                                    	   mov [bx], 4560; do (C4)
[ 414]    035E: ??                                    	   jmp ply_snd
[ 415]    0360:                                       	freq_key_1:
[ 416]    0360: ??                                    	   mov bx, offset frequency
[ 417]    0363: ??                                    	   mov [bx], 4305; do# (C4#)
[ 418]    0367: ??                                    	   jmp ply_snd
[ 419]    0369:                                       	freq_key_2:
[ 420]    0369: ??                                    	   mov bx, offset frequency
[ 421]    036C: ??                                    	   mov [bx], 4063; re (D4)
[ 422]    0370: ??                                    	   jmp ply_snd
[ 423]    0372:                                       	freq_key_3:
[ 424]    0372: ??                                    	   mov bx, offset frequency
[ 425]    0375: ??                                    	   mov [bx], 3835; re# (D4#)
[ 426]    0379: ??                                    	   jmp ply_snd
[ 427]    037B:                                       	freq_key_4:
[ 428]    037B: ??                                    	   mov bx, offset frequency
[ 429]    037E: ??                                    	   mov [bx], 3620; mi (E4)
[ 430]    0382: ??                                    	   jmp ply_snd
[ 431]    0384:                                       	freq_key_5:
[ 432]    0384: ??                                    	   mov bx, offset frequency
[ 433]    0387: ??                                    	   mov [bx], 3417; fa (F4)
[ 434]    038B: ??                                    	   jmp ply_snd
[ 435]    038D:                                       	freq_key_6:
[ 436]    038D: ??                                    	   mov bx, offset frequency
[ 437]    0390: ??                                    	   mov [bx], 3225; fa# (F4#)
[ 438]    0394: ??                                    	   jmp ply_snd
[ 439]    0396:                                       	freq_key_7:
[ 440]    0396: ??                                    	   mov bx, offset frequency
[ 441]    0399: ??                                    	   mov [bx], 3044; sol (G4)
[ 442]    039D: ??                                    	   jmp ply_snd
[ 443]    039F:                                       	freq_key_8:
[ 444]    039F: ??                                    	   mov bx, offset frequency
[ 445]    03A2: ??                                    	   mov [bx], 2873; sol# (G4#)
[ 446]    03A6: ??                                    	   jmp ply_snd
[ 447]    03A8:                                       	freq_key_9:
[ 448]    03A8: ??                                    	   mov bx, offset frequency
[ 449]    03AB: ??                                    	   mov [bx], 2712; la (A4)
[ 450]    03AF: ??                                    	   jmp ply_snd
[ 451]    03B1:                                       	freq_key_10:
[ 452]    03B1: ??                                    	   mov bx, offset frequency
[ 453]    03B4: ??                                    	   mov [bx], 2560; la# (A4#)
[ 454]    03B8: ??                                    	   jmp ply_snd
[ 455]    03BA:                                       	freq_key_11:
[ 456]    03BA: ??                                    	   mov bx, offset frequency
[ 457]    03BD: ??                                    	   mov [bx], 2416; si (B4)
[ 458]    03C1: ??                                    	   jmp ply_snd
[ 459]        :                                       			
[ 460]    03C3:                                       	ply_snd:
[ 461]    03C3: ??                                    	    MOV     DX,10000         ; Number of times to repeat whole routine.
[ 462]        :                                       
[ 463]    03C6: ??                                    	MOV     BX, offset frequency           ; Frequency value.
[ 464]        :                                       
[ 465]    03C9: ??                                    	MOV     AL, 10110110B    ; The Magic Number (use this binary number only)
[ 466]    03CB: ??                                    	OUT     43H, AL          ; Send it to the initializing port 43H Timer 2.
[ 467]        :                                       
[ 468]    03CD:                                       	NEXT_FREQUENCY:          ; This is were we will jump back to 2000 times.
[ 469]        :                                       
[ 470]    03CD: ??                                    	MOV     AX, [BX]           ; Move our Frequency value into AX.
[ 471]        :                                       
[ 472]    03CF: ??                                    	OUT     42H, AL          ; Send LSB to port 42H.
[ 473]    03D1: ??                                    	MOV     AL, AH           ; Move MSB into AL
[ 474]    03D3: ??                                    	OUT     42H, AL          ; Send MSB to port 42H.
[ 475]        :                                       
[ 476]    03D5: ??                                    	IN      AL, 61H          ; Get current value of port 61H.
[ 477]    03D7: ??                                    	OR      AL, 00000011B    ; OR AL to this value, forcing first two bits high.
[ 478]    03D9: ??                                    	OUT     61H, AL          ; Copy it to port 61H of the PPI Chip
[ 479]        :                                       							 ; to turn ON the speaker.
[ 480]        :                                       
[ 481]    03DB: ??                                    	MOV     CX, 100          ; Repeat loop 100 times
[ 482]    03DE:                                       	DELAY_LOOP:              ; Here is where we loop back too.
[ 483]    03DE: ??                                    	LOOP    DELAY_LOOP       ; Jump repeatedly to DELAY_LOOP until CX = 0
[ 484]        :                                       
[ 485]    03E0: ??                                    	DEC     DX               ; Decrement repeat routine count
[ 486]        :                                       
[ 487]    03E1: ??                                    	CMP     DX, 0            ; Is DX (repeat count) = to 0
[ 488]    03E4: ??                                    	JNZ     NEXT_FREQUENCY   ; If not jump to NEXT_FREQUENCY
[ 489]        :                                       							 ; and do whole routine again.
[ 490]        :                                       
[ 491]        :                                       							 ; Else DX = 0 time to turn speaker OFF
[ 492]        :                                       
[ 493]    03E6: ??                                    	IN      AL,61H           ; Get current value of port 61H.
[ 494]    03E8: ??                                    	AND     AL,11111100B     ; AND AL to this value, forcing first two bits low.
[ 495]    03EA: ??                                    	OUT     61H,AL           ; Copy it to port 61H of the PPI Chip
[ 496]    03EC: ??                                    	ret
[ 497]        :                                       play_sound_freq ENDP
[ 498]        :                                       
[ 499]        :                                       
[ 500]    03ED: ??                                    msg1 db " PIaNOS "
[ 501]    03F5:                                       msg1end:
[ 502]    03F5: ??                                    menu1 db "F1   Free-To-play"
[ 503]    0406:                                       menu1end:
[ 504]    0406: ??                                    menu2 db "F2   Play a piece"
[ 505]    0417:                                       menu2end:
[ 506]    0417: ??                                    menu3 db "F3   Watch me play"
[ 507]    0429:                                       menu3end:
[ 508]    0429: ??                                    menu4 db "ESC  Exit"
[ 509]    0432:                                       menu4end:
[ 510]    0432: ??                                    menu5 db "Please read the user manual before playing"
[ 511]    045C:                                       menu5end:
[ 512]    045C: ??                                    pap1 db "Choose a piece: "
[ 513]    046C:                                       pap1end:
[ 514]    046C: ??                                    pap2 db "F1   By night, in the moonlight"
[ 515]    048B:                                       pap2end:
[ 516]    048B: ??                                    pap3 db "More releases in the future!"
[ 517]    04A7:                                       pap3end:
[ 518]    04A7: ??                                    pap4 db "ESC Main Menu"
[ 519]    04B4:                                       pap4end:
[ 520]        :                                       
 
===================================================================================================
 




===================================================================================================
