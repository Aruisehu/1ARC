EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
menu with sounds.bin -- emu8086 assembler version: 4.08  
 
[ 06/06/2016  --  15:59:51 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       org 7e10h
[   2]        :                                       
[   3]        :                                       
[   4]    0000: ??                                    mov ax, 1000h
[   5]    0003: ??                                    mov ss, ax; move the stack location in memory
[   6]        :                                       ;Main Menu
[   7]        :                                       ;Use F1, F2, F3 to select the mode
[   8]        :                                       ;Escape to quit program
[   9]    0005:                                       main:
[  10]        :                                       ; print the menu
[  11]    0005: ??                                    call refresh
[  12]    0008: ??                                    mov al, ' ' ; character to print
[  13]    000A: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[  14]    000C: ??                                    mov bh, 0 ; print on  page 1
[  15]    000E: ??                                    mov cx, 4000 ; number of character to print
[  16]    0011: ??                                    mov ah, 9 ; prepare interruption
[  17]    0013: ??                                    int 10h
[  18]    0015: ??                                    mov al, 1
[  19]    0017: ??                                    mov bh, 0
[  20]    0019: ??                                    mov bl, 0000_1011b ; choose the color
[  21]    001B: ??                                    mov cx, msg1end - offset msg1 ; calculate message size.
[  22]    001E: ??                                    mov dl, 30; select the column where to print the message
[  23]    0020: ??                                    mov dh, 0 ; select the row
[  24]    0022: ??                                    mov bp, offset msg1; select the string to be print
[  25]    0025: ??                                    mov ah, 13h ; print the string pointed by es:bp
[  26]    0027: ??                                    int 10h
[  27]        :                                       	; don't need to change ah value, so we are doing exactly the same thing
[  28]    0029: ??                                    mov cx, menu1end - offset menu1 ; calculate message size.
[  29]    002C: ??                                    mov dl, 3
[  30]    002E: ??                                    mov dh, 3
[  31]    0030: ??                                    mov bp, offset menu1
[  32]    0033: ??                                    int 10h
[  33]        :                                       	
[  34]    0035: ??                                    mov cx, menu2end - offset menu2 ; calculate message size.
[  35]    0038: ??                                    mov dh, 5
[  36]    003A: ??                                    mov bp, offset menu2
[  37]    003D: ??                                    int 10h
[  38]        :                                       	
[  39]    003F: ??                                    mov cx, menu3end - offset menu3; calculate message size.
[  40]    0042: ??                                    mov dh, 7
[  41]    0044: ??                                    mov bp, offset menu3
[  42]    0047: ??                                    int 10h
[  43]        :                                       	
[  44]    0049: ??                                    mov cx, menu4end - offset menu4; calculate message size.
[  45]    004C: ??                                    mov dh, 11
[  46]    004E: ??                                    mov bp, offset menu4
[  47]    0051: ??                                    int 10h
[  48]        :                                       
[  49]    0053: ??                                    mov cx, menu5end - offset menu5; calculate message size.
[  50]    0056: ??                                    mov dh, 14
[  51]    0058: ??                                    mov dl, 0
[  52]    005A: ??                                    mov bp, offset menu5
[  53]    005D: ??                                    int 10h
[  54]        :                                       	
[  55]    005F: ??                                    mov ah, 0
[  56]    0061: ??                                    int 16h
[  57]    0063: ??                                    cmp ah, 1
[  58]    0066: ??                                    je fin
[  59]    0068: ??                                    cmp ah, 3Bh
[  60]    006B: ??                                    je ftp
[  61]    006D: ??                                    cmp ah, 3Ch
[  62]    0070: ??                                    je pap
[  63]    0072: ??                                    cmp ah, 3Dh
[  64]    0075: ??                                    je wmp
[  65]    007A: ??                                    jne main
[  66]        :                                       
[  67]        :                                       
[  68]    007C:                                       fin:
[  69]    007C: ??                                    int 20h
[  70]        :                                       
[  71]    007E:                                       ftp:
[  72]    007E: ??                                    call refresh
[  73]    0081: ??                                    mov al, ' ' ; character to print
[  74]    0083: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[  75]    0085: ??                                    mov bh, 0 ; print on  page 1
[  76]    0087: ??                                    mov cx, 4000 ; number of character to print
[  77]    008A: ??                                    mov ah, 9 ; prepare interruption
[  78]    008C:                                       press_key:
[  79]    008C: ??                                    call print_piano
[  80]    008F: ??                                    mov ah, 0
[  81]    0091: ??                                    int 16h ; wait for a pressed key
[  82]    0093: ??                                    mov bx, offset pressed_key
[  83]    0096: ??                                    cmp ah, 1 ; escape pressed, we quit the program
[  84]    0099: ??                                    je end_free
[  85]    009B: ??                                    sub ah, 10h
[  86]    009E: ??                                    cmp ah, 12
[  87]    00A1: ??                                    jge press_key ;user doesn't press the right key
[  88]    00A3: ??                                    mov [bx], ah
[  89]    00A5: ??                                    call print_piano
[  90]    00A8: ??                                    	call play_sound_freq
[  91]    00AB: ??                                    jmp press_key
[  92]    00AD:                                       end_free:
[  93]    00AD: ??                                    jmp main
[  94]        :                                       
[  95]    00B0:                                       pap:
[  96]    00B0: ??                                    call refresh
[  97]    00B3: ??                                    mov al, ' ' ; character to print
[  98]    00B5: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[  99]    00B7: ??                                    mov bh, 0 ; print on  page 1
[ 100]    00B9: ??                                    mov cx, 4000 ; number of character to print
[ 101]    00BC: ??                                    mov ah, 9 ; prepare interruption
[ 102]    00BE:                                       menupap:
[ 103]    00BE: ??                                    mov al, 1
[ 104]    00C0: ??                                    mov bh, 0
[ 105]    00C2: ??                                    mov bl, 0000_1111b ; choose the color
[ 106]    00C4: ??                                    mov cx, pap1end - offset pap1 ; calculate message size.
[ 107]    00C7: ??                                    mov dl, 25; select the column where to print the message
[ 108]    00C9: ??                                    mov dh, 0 ; select the row
[ 109]    00CB: ??                                    mov bp, offset pap1; select the string to be print
[ 110]    00CE: ??                                    mov ah, 13h ; print the string pointed by es:bp
[ 111]    00D0: ??                                    int 10h
[ 112]    00D2: ??                                    mov cx, pap2end - offset pap2 ; calculate message size.
[ 113]    00D5: ??                                    mov dl, 3
[ 114]    00D7: ??                                    mov dh, 3
[ 115]    00D9: ??                                    mov bp, offset pap2
[ 116]    00DC: ??                                    int 10h
[ 117]    00DE: ??                                    mov cx, pap3end - offset pap3 ; calculate message size.
[ 118]    00E1: ??                                    mov dh, 5
[ 119]    00E3: ??                                    mov bp, offset pap3
[ 120]    00E6: ??                                    int 10h
[ 121]    00E8: ??                                    mov cx, pap4end - offset pap4 ; calculate message size.
[ 122]    00EB: ??                                    mov dh, 7
[ 123]    00ED: ??                                    mov bp, offset pap4
[ 124]    00F0: ??                                    int 10h
[ 125]    00F2: ??                                    mov ah, 0
[ 126]    00F4: ??                                    int 16h ;menu "Pick a song"
[ 127]    00F6: ??                                    cmp ah, 3Bh
[ 128]    00F9: ??                                    jne other1
[ 129]    00FB: ??                                    mov bx, offset piece1[0]
[ 130]    00FE: ??                                    push bx
[ 131]    00FF: ??                                    je play
[ 132]    0101:                                       other1:
[ 133]    0101: ??                                    cmp ah, 1h
[ 134]    0104: ??                                    jne other2
[ 135]    0106: ??                                    ret
[ 136]    0107:                                       other2:
[ 137]    0107: ??                                    jmp menupap ; if invalid key, wait for a valid one
[ 138]        :                                       ;piano plays with azertyuiop^$
[ 139]    0109:                                       play:
[ 140]    0109: ??                                    pop bx
[ 141]    010A: ??                                    mov al, ' ' ; character to print
[ 142]    010C: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 143]    010E: ??                                    mov bh, 0 ; print on  page 1
[ 144]    0110: ??                                    mov cx, 4000 ; number of character to print
[ 145]    0113: ??                                    mov ah, 9 ; prepare interruption
[ 146]    0115: ??                                    call print_piano
[ 147]    0118:                                       beginp:
[ 148]    0118: ??                                    mov cl, 11
[ 149]    011A:                                       press_key1:
[ 150]    011A: ??                                    cmp [bx], 13
[ 151]    011D: ??                                    je end_play
[ 152]    011F: ??                                    cmp [bx], cl
[ 153]    0121: ??                                    jne next
[ 154]    0123: ??                                    mov al, cl
[ 155]    0125: ??                                    mov dl, 6
[ 156]    0127: ??                                    mul dl
[ 157]    0129: ??                                    push bx
[ 158]    012A: ??                                    push cx
[ 159]    012B: ??                                    call print_next
[ 160]    012E: ??                                    pop cx
[ 161]    012F: ??                                    pop bx
[ 162]    0130:                                       next:
[ 163]    0130: ??                                    cmp cl, 0
[ 164]    0133: ??                                    je piano
[ 165]    0135: ??                                    dec cl
[ 166]    0137: ??                                    jmp press_key1
[ 167]    0139:                                       piano:
[ 168]    0139: ??                                    mov ah, 0
[ 169]    013B: ??                                    int 16h ; wait for a pressed key
[ 170]    013D: ??                                    push bx
[ 171]    013E: ??                                    mov bx, offset pressed_key
[ 172]    0141: ??                                    cmp ah, 1 ; escape pressed, we quit the program
[ 173]    0144: ??                                    je end_play
[ 174]    0146: ??                                    sub ah, 10h
[ 175]    0149: ??                                    mov [bx], ah
[ 176]    014B: ??                                    call print_piano
[ 177]    014E: ??                                    call play_sound_freq
[ 178]    0151: ??                                    pop bx
[ 179]    0152: ??                                    inc bx
[ 180]    0153: ??                                    jmp beginp
[ 181]    0155:                                       end_play:
[ 182]    0155: ??                                    jmp main
[ 183]        :                                       
[ 184]    0158:                                       wmp:
[ 185]        :                                       ;call watch_me_play ; doesn't exist for now
[ 186]    0158: ??                                    jmp main
[ 187]        :                                       
[ 188]    015B:                                       refresh PROC
[ 189]        :                                       ;use to make the screen white
[ 190]    015B: ??                                    mov cl, 26
[ 191]    015D: ??                                    xor bx, bx ;put bx to 0
[ 192]    015F:                                       rowr:
[ 193]    015F: ??                                    dec cl
[ 194]    0161: ??                                    mov dh, cl
[ 195]    0163: ??                                    mov dl, 0
[ 196]    0165: ??                                    mov ah, 2
[ 197]    0167: ??                                    int 10h
[ 198]    0169: ??                                    mov al, ' ' ; character to print
[ 199]    016B: ??                                    push cx
[ 200]    016C: ??                                    mov cx, 80 ; number of character to print
[ 201]    016F: ??                                    mov ah, 9 ; prepare interruption
[ 202]    0171: ??                                    int 10h
[ 203]    0173: ??                                    pop cx
[ 204]    0174: ??                                    cmp cl, 0
[ 205]    0177: ??                                    jne rowr
[ 206]    0179: ??                                    ret
[ 207]        :                                       refresh ENDP
[ 208]        :                                       
[ 209]    017A:                                       print_next PROC
[ 210]    017A: ??                                    mov dl, al ;set the cursor position on the column
[ 211]    017C: ??                                    mov dh, 14
[ 212]    017E: ??                                    mov bh, 0 ; change page's 1 cursor
[ 213]    0180: ??                                    mov ah, 2 ; prepare interruption
[ 214]    0182: ??                                    int 10h ; change cursor position
[ 215]    0184: ??                                    mov al, '-' ; character to print
[ 216]    0186: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 217]    0188: ??                                    mov bh, 0 ; print on  page 1
[ 218]    018A: ??                                    mov cx, 6 ; number of character to print
[ 219]    018D: ??                                    mov ah, 9 ; prepare interruption
[ 220]    018F: ??                                    int 10h ; printing
[ 221]    0191: ??                                    ret
[ 222]        :                                       print_next ENDP
[ 223]        :                                       
[ 224]    0192:                                       print_piano PROC
[ 225]    0192: ??                                    call refresh
[ 226]    0195: ??                                    mov bx, offset column
[ 227]    0198: ??                                    mov [bx], 0
[ 228]    019B: ??                                    mov bx, offset key_off
[ 229]    019E: ??                                    mov [bx], 0; put the value to 0
[ 230]    01A1: ??                                    mov dx, 0000h
[ 231]    01A4: ??                                    mov bh, 0
[ 232]    01A6: ??                                    mov ah, 2
[ 233]    01A8: ??                                    int 10h ; puts the cursor on the first column, first row
[ 234]    01AA: ??                                    mov cx, 0; use as a counter
[ 235]    01AD:                                       key:
[ 236]    01AD: ??                                    mov bx, offset color
[ 237]    01B0: ??                                    mov [bx], 00001111b
[ 238]    01B3: ??                                    mov bx, offset row
[ 239]    01B6: ??                                    mov [bx], 0 ; restore the value of the row
[ 240]    01B9: ??                                    mov bx, offset pressed_key
[ 241]    01BC: ??                                    cmp [bx], cl
[ 242]    01BE: ??                                    jnz continue:
[ 243]    01C0: ??                                    mov bx, offset color
[ 244]    01C3: ??                                    mov [bx], 00001100b
[ 245]    01C6:                                       continue:
[ 246]    01C6: ??                                    push cx ; save the value of the counter
[ 247]    01C7: ??                                    mov bx, offset key_off
[ 248]    01CA: ??                                    mov dh, [bx]
[ 249]    01CC: ??                                    mov bx, offset column
[ 250]    01CF: ??                                    mov [bx], dh
[ 251]    01D1: ??                                    mov dl, [bx] ; look which key to print (by looking which offset of key we have)
[ 252]    01D3: ??                                    mov cx, 8
[ 253]    01D6: ??                                    mov bx, offset row
[ 254]    01D9: ??                                    mov dh, [bx] ; load cursor's row
[ 255]    01DB: ??                                    mov bh, 0
[ 256]    01DD: ??                                    mov ah, 2
[ 257]    01DF: ??                                    int 10h ; move the cursor to print this key
[ 258]    01E1: ??                                    mov al, '|' ; character to print
[ 259]    01E3: ??                                    mov bx, offset color
[ 260]    01E6: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 261]    01E8: ??                                    mov bh, 0 ; print on  page 1
[ 262]    01EA: ??                                    mov cx, 1 ; number of character to print
[ 263]    01ED: ??                                    mov ah, 9 ; prepare interruption
[ 264]    01EF: ??                                    int 10h ; printing
[ 265]    01F1: ??                                    mov bx, offset column ; pick up the address of the column
[ 266]    01F4: ??                                    inc [bx] ; add 1 to the column
[ 267]    01F6: ??                                    mov dl, [bx] ;set the cursor position on the column
[ 268]    01F8: ??                                    mov bh, 0 ; change page's 1 cursor
[ 269]    01FA: ??                                    mov ah, 2 ; prepare interruption
[ 270]    01FC: ??                                    int 10h ; change cursor position
[ 271]    01FE: ??                                    mov al, ' '
[ 272]    0200: ??                                    mov bx, offset color
[ 273]    0203: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 274]    0205: ??                                    mov bh, 0 ; print on  page 1
[ 275]    0207: ??                                    mov cx, 4
[ 276]    020A: ??                                    mov ah, 9
[ 277]    020C: ??                                    int 10h
[ 278]    020E: ??                                    mov bx, offset column
[ 279]    0211: ??                                    add [bx], 4
[ 280]    0214: ??                                    mov dl, [bx]
[ 281]    0216: ??                                    mov bh, 0
[ 282]    0218: ??                                    mov ah, 2
[ 283]    021A: ??                                    int 10h
[ 284]    021C: ??                                    mov al, '|'
[ 285]    021E: ??                                    mov bx, offset color
[ 286]    0221: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 287]    0223: ??                                    mov bh, 0 ; print on  page 1
[ 288]    0225: ??                                    mov cx, 1
[ 289]    0228: ??                                    mov ah, 9
[ 290]    022A: ??                                    int 10h
[ 291]    022C: ??                                    mov cx, 12 ;use to loop
[ 292]    022F:                                       etiq:
[ 293]    022F: ??                                    mov bx, offset key_off
[ 294]    0232: ??                                    mov dh, [bx]
[ 295]    0234: ??                                    mov bx, offset column
[ 296]    0237: ??                                    mov [bx], dh
[ 297]    0239: ??                                    mov dl, [bx]
[ 298]    023B: ??                                    mov bx, offset row ;restore the value
[ 299]    023E: ??                                    inc [bx]
[ 300]    0240: ??                                    mov dh, [bx]
[ 301]    0242: ??                                    mov bh, 0
[ 302]    0244: ??                                    mov ah, 2
[ 303]    0246: ??                                    int 10h ;move cursor
[ 304]    0248: ??                                    push cx ; store cx (modified in function)
[ 305]    0249: ??                                    mov al, '|' ; character to print
[ 306]    024B: ??                                    mov bx, offset color
[ 307]    024E: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 308]    0250: ??                                    mov bh, 0 ; print on  page 1
[ 309]    0252: ??                                    mov cx, 1 ; number of character to print
[ 310]    0255: ??                                    mov ah, 9 ; prepare interruption
[ 311]    0257: ??                                    int 10h ; printing
[ 312]    0259: ??                                    mov bx, offset column ; pick up the address of the column
[ 313]    025C: ??                                    inc [bx] ; add 1 to the column
[ 314]    025E: ??                                    mov dl, [bx] ;set the cursor position on the column
[ 315]    0260: ??                                    mov bh, 0 ; change page's 1 cursor
[ 316]    0262: ??                                    mov ah, 2 ; prepare interruption
[ 317]    0264: ??                                    int 10h ; change cursor position
[ 318]    0266: ??                                    mov al, ' '
[ 319]    0268: ??                                    mov bx, offset color
[ 320]    026B: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 321]    026D: ??                                    mov bh, 0 ; print on  page 1
[ 322]    026F: ??                                    mov cx, 4
[ 323]    0272: ??                                    mov ah, 9
[ 324]    0274: ??                                    int 10h
[ 325]    0276: ??                                    mov bx, offset column
[ 326]    0279: ??                                    add [bx], 4
[ 327]    027C: ??                                    mov dl, [bx]
[ 328]    027E: ??                                    mov bh, 0
[ 329]    0280: ??                                    mov ah, 2
[ 330]    0282: ??                                    int 10h
[ 331]    0284: ??                                    mov al, '|'
[ 332]    0286: ??                                    mov bx, offset color
[ 333]    0289: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 334]    028B: ??                                    mov bh, 0 ; print on  page 1
[ 335]    028D: ??                                    mov cx, 1
[ 336]    0290: ??                                    mov ah, 9
[ 337]    0292: ??                                    int 10h
[ 338]    0294: ??                                    pop cx ;restore cx value
[ 339]    0295: ??                                    dec cx
[ 340]    0296: ??                                    cmp cx, 0
[ 341]    0299: ??                                    jnz etiq ; loop while cx>0
[ 342]    029B: ??                                    mov bx, offset key_off
[ 343]    029E: ??                                    mov dh, [bx]
[ 344]    02A0: ??                                    mov bx, offset column
[ 345]    02A3: ??                                    mov [bx], dh
[ 346]    02A5: ??                                    mov dl, [bx]
[ 347]    02A7: ??                                    mov bx, offset row
[ 348]    02AA: ??                                    inc [bx]
[ 349]    02AC: ??                                    mov dh, [bx]
[ 350]    02AE: ??                                    mov bh, 0
[ 351]    02B0: ??                                    mov ah, 2
[ 352]    02B2: ??                                    int 10h  ; move cursor to the right position
[ 353]    02B4: ??                                    mov al, '-' ; character to print
[ 354]    02B6: ??                                    mov bx, offset color
[ 355]    02B9: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 356]    02BB: ??                                    mov bh, 0 ; print on  page 1
[ 357]    02BD: ??                                    mov cx, 6 ; number of character to print
[ 358]    02C0: ??                                    mov ah, 9 ; prepare interruption
[ 359]    02C2: ??                                    int 10h ; printing ; print end of the touch
[ 360]    02C4: ??                                    pop cx ; restore this value
[ 361]    02C5: ??                                    mov bx, offset key_off
[ 362]    02C8: ??                                    add [bx], 6 ; use to change key
[ 363]    02CB: ??                                    inc cx
[ 364]    02CC: ??                                    cmp cx, 12
[ 365]    02CF: ??                                    jnz key ;loop
[ 366]        :                                       
[ 367]    02D4: ??                                    mov dl, 0
[ 368]    02D6: ??                                    mov dh, 14
[ 369]    02D8: ??                                    mov bh, 0
[ 370]    02DA: ??                                    mov ah, 2
[ 371]    02DC: ??                                    int 10h  ; move cursor to the right position
[ 372]    02DE: ??                                    mov al, ' ' ; character to print
[ 373]    02E0: ??                                    mov bl, 0
[ 374]    02E2: ??                                    mov bh, 0 ; print on  page 1
[ 375]    02E4: ??                                    mov cx, 50h ; number of character to print
[ 376]    02E7: ??                                    mov ah, 9 ; prepare interruption
[ 377]    02E9: ??                                    int 10h ; printing
[ 378]    02EB: ??                                    ret
[ 379]        :                                       print_piano ENDP
[ 380]        :                                       
[ 381]    02EC:                                       play_sound_freq PROC
[ 382]    02EC: ??                                    	mov bx, offset pressed_key
[ 383]    02EF: ??                                    	cmp [bx], 0
[ 384]    02F2: ??                                    	je freq_key_0
[ 385]    02F4: ??                                    	cmp [bx], 1
[ 386]    02F7: ??                                    	je freq_key_1
[ 387]    02F9: ??                                    	cmp [bx], 2
[ 388]    02FC: ??                                    	je freq_key_2
[ 389]    02FE: ??                                    	cmp [bx], 3
[ 390]    0301: ??                                    	je freq_key_3
[ 391]    0303: ??                                    	cmp [bx], 4
[ 392]    0306: ??                                    	je freq_key_4
[ 393]    0308: ??                                    	cmp [bx], 5
[ 394]    030B: ??                                    	je freq_key_5
[ 395]    030D: ??                                    	cmp [bx], 6
[ 396]    0310: ??                                    	je freq_key_6
[ 397]    0312: ??                                    	cmp [bx], 7
[ 398]    0315: ??                                    	je freq_key_7
[ 399]    0317: ??                                    	cmp [bx], 8
[ 400]    031A: ??                                    	je freq_key_8
[ 401]    031C: ??                                    	cmp [bx], 9
[ 402]    031F: ??                                    	je freq_key_9
[ 403]    0321: ??                                    	cmp [bx], 10
[ 404]    0324: ??                                    	je freq_key_10
[ 405]    0326: ??                                    	cmp [bx], 11
[ 406]    0329: ??                                    	je freq_key_11
[ 407]    032B: ??                                    jmp ply_snd
[ 408]        :                                       
[ 409]    032D:                                       	freq_key_0:
[ 410]    032D: ??                                    	   mov bx, offset frequency
[ 411]    0330: ??                                    	   mov [bx], 4560; do (C4)
[ 412]    0334: ??                                    	   jmp ply_snd
[ 413]    0336:                                       	freq_key_1:
[ 414]    0336: ??                                    	   mov bx, offset frequency
[ 415]    0339: ??                                    	   mov [bx], 4305; do# (C4#)
[ 416]    033D: ??                                    	   jmp ply_snd
[ 417]    033F:                                       	freq_key_2:
[ 418]    033F: ??                                    	   mov bx, offset frequency
[ 419]    0342: ??                                    	   mov [bx], 4063; re (D4)
[ 420]    0346: ??                                    	   jmp ply_snd
[ 421]    0348:                                       	freq_key_3:
[ 422]    0348: ??                                    	   mov bx, offset frequency
[ 423]    034B: ??                                    	   mov [bx], 3835; re# (D4#)
[ 424]    034F: ??                                    	   jmp ply_snd
[ 425]    0351:                                       	freq_key_4:
[ 426]    0351: ??                                    	   mov bx, offset frequency
[ 427]    0354: ??                                    	   mov [bx], 3620; mi (E4)
[ 428]    0358: ??                                    	   jmp ply_snd
[ 429]    035A:                                       	freq_key_5:
[ 430]    035A: ??                                    	   mov bx, offset frequency
[ 431]    035D: ??                                    	   mov [bx], 3417; fa (F4)
[ 432]    0361: ??                                    	   jmp ply_snd
[ 433]    0363:                                       	freq_key_6:
[ 434]    0363: ??                                    	   mov bx, offset frequency
[ 435]    0366: ??                                    	   mov [bx], 3225; fa# (F4#)
[ 436]    036A: ??                                    	   jmp ply_snd
[ 437]    036C:                                       	freq_key_7:
[ 438]    036C: ??                                    	   mov bx, offset frequency
[ 439]    036F: ??                                    	   mov [bx], 3044; sol (G4)
[ 440]    0373: ??                                    	   jmp ply_snd
[ 441]    0375:                                       	freq_key_8:
[ 442]    0375: ??                                    	   mov bx, offset frequency
[ 443]    0378: ??                                    	   mov [bx], 2873; sol# (G4#)
[ 444]    037C: ??                                    	   jmp ply_snd
[ 445]    037E:                                       	freq_key_9:
[ 446]    037E: ??                                    	   mov bx, offset frequency
[ 447]    0381: ??                                    	   mov [bx], 2712; la (A4)
[ 448]    0385: ??                                    	   jmp ply_snd
[ 449]    0387:                                       	freq_key_10:
[ 450]    0387: ??                                    	   mov bx, offset frequency
[ 451]    038A: ??                                    	   mov [bx], 2560; la# (A4#)
[ 452]    038E: ??                                    	   jmp ply_snd
[ 453]    0390:                                       	freq_key_11:
[ 454]    0390: ??                                    	   mov bx, offset frequency
[ 455]    0393: ??                                    	   mov [bx], 2416; si (B4)
[ 456]    0397: ??                                    	   jmp ply_snd
[ 457]        :                                       			
[ 458]    0399:                                       	ply_snd:
[ 459]    0399: ??                                    	    MOV     DX,10000         ; Number of times to repeat whole routine.
[ 460]        :                                       
[ 461]    039C: ??                                    	MOV     BX, offset frequency           ; Frequency value.
[ 462]        :                                       
[ 463]    039F: ??                                    	MOV     AL, 10110110B    ; The Magic Number (use this binary number only)
[ 464]    03A1: ??                                    	OUT     43H, AL          ; Send it to the initializing port 43H Timer 2.
[ 465]        :                                       
[ 466]    03A3:                                       	NEXT_FREQUENCY:          ; This is were we will jump back to 2000 times.
[ 467]        :                                       
[ 468]    03A3: ??                                    	MOV     AX, [BX]           ; Move our Frequency value into AX.
[ 469]        :                                       
[ 470]    03A5: ??                                    	OUT     42H, AL          ; Send LSB to port 42H.
[ 471]    03A7: ??                                    	MOV     AL, AH           ; Move MSB into AL
[ 472]    03A9: ??                                    	OUT     42H, AL          ; Send MSB to port 42H.
[ 473]        :                                       
[ 474]    03AB: ??                                    	IN      AL, 61H          ; Get current value of port 61H.
[ 475]    03AD: ??                                    	OR      AL, 00000011B    ; OR AL to this value, forcing first two bits high.
[ 476]    03AF: ??                                    	OUT     61H, AL          ; Copy it to port 61H of the PPI Chip
[ 477]        :                                       							 ; to turn ON the speaker.
[ 478]        :                                       
[ 479]    03B1: ??                                    	MOV     CX, 100          ; Repeat loop 100 times
[ 480]    03B4:                                       	DELAY_LOOP:              ; Here is where we loop back too.
[ 481]    03B4: ??                                    	LOOP    DELAY_LOOP       ; Jump repeatedly to DELAY_LOOP until CX = 0
[ 482]        :                                       
[ 483]    03B6: ??                                    	DEC     DX               ; Decrement repeat routine count
[ 484]        :                                       
[ 485]    03B7: ??                                    	CMP     DX, 0            ; Is DX (repeat count) = to 0
[ 486]    03BA: ??                                    	JNZ     NEXT_FREQUENCY   ; If not jump to NEXT_FREQUENCY
[ 487]        :                                       							 ; and do whole routine again.
[ 488]        :                                       
[ 489]        :                                       							 ; Else DX = 0 time to turn speaker OFF
[ 490]        :                                       
[ 491]    03BC: ??                                    	IN      AL,61H           ; Get current value of port 61H.
[ 492]    03BE: ??                                    	AND     AL,11111100B     ; AND AL to this value, forcing first two bits low.
[ 493]    03C0: ??                                    	OUT     61H,AL           ; Copy it to port 61H of the PPI Chip
[ 494]    03C2: ??                                    	ret
[ 495]        :                                       play_sound_freq ENDP
[ 496]        :                                       
[ 497]    03C3: ??                                    color db 00001111b
[ 498]    03C4: ??                                    column db 0 ; must change value in code to display other touch
[ 499]    03C5: ??                                    row db 0
[ 500]    03C6: ??                                    key_off db 0
[ 501]    03C7: ??                                    pressed_key db 12h
[ 502]    03C8: ??                                    frequency dw 12h
[ 503]    03CA: ??                                    next_key db 12h
[ 504]    03CB: ??                                    piece1 db 5,5,5,7,9,7,5,9,7,7,5,5,5,5,7,9,7,5,9,7,7,5,7,7,7,7,2,2,7,5,4,2,0,5,5,5,7,9,7,5,9,7,7,5,13
[ 505]    03F8: ??                                    msg1 db " PIaNOS "
[ 506]    0400:                                       msg1end:
[ 507]    0400: ??                                    menu1 db "F1   Free-To-play"
[ 508]    0411:                                       menu1end:
[ 509]    0411: ??                                    menu2 db "F2   Play a piece"
[ 510]    0422:                                       menu2end:
[ 511]    0422: ??                                    menu3 db "F3   Watch me play"
[ 512]    0434:                                       menu3end:
[ 513]    0434: ??                                    menu4 db "ESC  Exit"
[ 514]    043D:                                       menu4end:
[ 515]    043D: ??                                    menu5 db "Please read the user manual before playing"
[ 516]    0467:                                       menu5end:
[ 517]    0467: ??                                    pap1 db "Choose a piece: "
[ 518]    0477:                                       pap1end:
[ 519]    0477: ??                                    pap2 db "F1   By night, in the moonlight"
[ 520]    0496:                                       pap2end:
[ 521]    0496: ??                                    pap3 db "More releases in the future!"
[ 522]    04B2:                                       pap3end:
[ 523]    04B2: ??                                    pap4 db "ESC Main Menu"
[ 524]    04BF:                                       pap4end:
[ 525]        :                                       
 
===================================================================================================
 




===================================================================================================
