EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
menu.bin -- emu8086 assembler version: 4.03  
 
[ 04/06/2016  --  00:10:09 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       org 7e10h
[   2]        :                                       
[   3]    0000: ??                                    call main
[   4]        :                                       
[   5]        :                                       ;Main Menu
[   6]        :                                       ;Use F1, F2, F3 to select the mode
[   7]        :                                       ;Escape to quit program
[   8]        :                                       
[   9]    0003:                                       main PROC
[  10]        :                                       ; print the menu
[  11]    0003: ??                                    mov al, 1
[  12]    0005: ??                                    	mov bh, 0
[  13]    0007: ??                                    	mov bl, 0000_1011b ; choose the color
[  14]    0009: ??                                    	mov cx, msg1end - offset msg1 ; calculate message size.
[  15]    000C: ??                                    	mov dl, 30; select the column where to print the message
[  16]    000E: ??                                    	mov dh, 0 ; select the row
[  17]    0010: ??                                    	mov bp, offset msg1; select the string to be print
[  18]    0013: ??                                    	mov ah, 13h ; print the string pointed by es:bp
[  19]    0015: ??                                    	int 10h
[  20]        :                                       	; don't need to change ah value, so we are doing exactly the same thing
[  21]    0017: ??                                    	mov cx, menu1end - offset menu1 ; calculate message size.
[  22]    001A: ??                                    	mov dl, 3
[  23]    001C: ??                                    	mov dh, 3
[  24]    001E: ??                                    	mov bp, offset menu1
[  25]    0021: ??                                    	int 10h
[  26]        :                                       	
[  27]    0023: ??                                    	mov cx, menu2end - offset menu2 ; calculate message size.
[  28]    0026: ??                                    	mov dh, 5
[  29]    0028: ??                                    	mov bp, offset menu2
[  30]    002B: ??                                    	int 10h
[  31]        :                                       	
[  32]    002D: ??                                    	mov cx, menu3end - offset menu3; calculate message size.
[  33]    0030: ??                                    	mov dh, 7
[  34]    0032: ??                                    	mov bp, offset menu3
[  35]    0035: ??                                    	int 10h
[  36]        :                                       	
[  37]    0037: ??                                    	mov cx, menu4end - offset menu4; calculate message size.
[  38]    003A: ??                                    	mov dh, 11
[  39]    003C: ??                                    	mov bp, offset menu4
[  40]    003F: ??                                    	int 10h
[  41]        :                                       	
[  42]    0041: ??                                    	mov ah, 0
[  43]    0043: ??                                    	int 16h
[  44]    0045: ??                                    	cmp ah, 1
[  45]    0048: ??                                    	je fin
[  46]    004A: ??                                    	cmp ah, 10h
[  47]    004D: ??                                    	je ftp
[  48]    004F: ??                                    	cmp ah, 3Ch
[  49]    0052: ??                                    	je pap
[  50]    0054: ??                                    	cmp ah, 3Dh
[  51]    0057: ??                                    	je wmp
[  52]    0059: ??                                    	msg1 db " PIaNOS "
[  53]    0061:                                       msg1end:
[  54]    0061: ??                                    menu1 db "F1   Free-To-play"
[  55]    0072:                                       menu1end:
[  56]    0072: ??                                    menu2 db "F2   Play a piece"
[  57]    0083:                                       menu2end:
[  58]    0083: ??                                    menu3 db "F3   Watch me play"
[  59]    0095:                                       menu3end:
[  60]    0095: ??                                    menu4 db "ESC  Exit"
[  61]    009E:                                       menu4end:
[  62]        :                                       main ENDP
[  63]        :                                       
[  64]        :                                       
[  65]    009E:                                       fin:
[  66]    009E: ??                                    int 20h
[  67]        :                                       
[  68]    00A0:                                       ftp:
[  69]    00A0: ??                                    call free_to_play
[  70]    00A3: ??                                    call main
[  71]        :                                       
[  72]    00A6:                                       pap:
[  73]    00A6: ??                                    call play_a_piece ; doesn't exist for now
[  74]    00A9: ??                                    call main
[  75]        :                                       
[  76]    00AC:                                       wmp:
[  77]        :                                       ;call watch_me_play ; doesn't exist for now
[  78]    00AC: ??                                    call main
[  79]        :                                       
[  80]        :                                       
[  81]        :                                       
[  82]    00AF:                                       free_to_play PROC
[  83]        :                                       ;piano plays with azertyuiop^$
[  84]    00AF: ??                                    mov bx, offset pressed_key
[  85]    00B2: ??                                    mov [bx], 12h
[  86]    00B5: ??                                    call print_piano
[  87]    00B8:                                       press_key:
[  88]    00B8: ??                                    mov ah, 0
[  89]    00BA: ??                                    int 16h ; wait for a pressed key
[  90]    00BC: ??                                    mov bx, offset pressed_key
[  91]    00BF: ??                                    cmp ah, 1 ; escape pressed, we quit the program
[  92]    00C2: ??                                    je end_free
[  93]    00C4: ??                                    sub ah, 10h
[  94]    00C7: ??                                    mov [bx], ah
[  95]    00C9: ??                                    call print_piano
[  96]    00CC: ??                                    jmp press_key
[  97]    00CE:                                       end_free:
[  98]    00CE: ??                                    ret
[  99]        :                                       free_to_play ENDP
[ 100]        :                                       
[ 101]    00CF:                                       play_a_piece PROC
[ 102]        :                                       ;piano plays with azertyuiop^$
[ 103]    00CF: ??                                    mov bx, offset pressed_key
[ 104]    00D2: ??                                    mov [bx], 12h
[ 105]    00D5: ??                                    call print_piano
[ 106]    00D8: ??                                    mov bx, offset piece1[0]
[ 107]    00DB:                                       beginp:
[ 108]    00DB: ??                                    mov cl, 11
[ 109]    00DD:                                       press_key1:
[ 110]    00DD: ??                                    cmp [bx], 13
[ 111]    00E0: ??                                    je end_play
[ 112]    00E2: ??                                    cmp [bx], cl
[ 113]    00E4: ??                                    jne next
[ 114]    00E6: ??                                    mov al, cl
[ 115]    00E8: ??                                    mov dl, 6
[ 116]    00EA: ??                                    mul dl
[ 117]    00EC: ??                                    push bx
[ 118]    00ED: ??                                    push cx
[ 119]    00EE: ??                                    call print_next
[ 120]    00F1: ??                                    pop cx
[ 121]    00F2: ??                                    pop bx
[ 122]    00F3:                                       next:
[ 123]    00F3: ??                                    cmp cl, 0
[ 124]    00F6: ??                                    je piano
[ 125]    00F8: ??                                    dec cl
[ 126]    00FA: ??                                    jmp press_key1
[ 127]    00FC:                                       piano:
[ 128]    00FC: ??                                    mov ah, 0
[ 129]    00FE: ??                                    int 16h ; wait for a pressed key
[ 130]    0100: ??                                    push bx
[ 131]    0101: ??                                    mov bx, offset pressed_key
[ 132]    0104: ??                                    cmp ah, 1 ; escape pressed, we quit the program
[ 133]    0107: ??                                    je end_play
[ 134]    0109: ??                                    sub ah, 10h
[ 135]    010C: ??                                    mov [bx], ah
[ 136]    010E: ??                                    call print_piano
[ 137]    0111: ??                                    pop bx
[ 138]    0112: ??                                    inc bx
[ 139]    0113: ??                                    jmp beginp
[ 140]    0115:                                       end_play:
[ 141]    0115: ??                                    ret
[ 142]        :                                       play_a_piece ENDP
[ 143]        :                                       
[ 144]    0116:                                       print_next PROC
[ 145]    0116: ??                                    mov dl, al ;set the cursor position on the column
[ 146]    0118: ??                                    mov dh, 14
[ 147]    011A: ??                                    mov bh, 0 ; change page's 1 cursor
[ 148]    011C: ??                                    mov ah, 2 ; prepare interruption
[ 149]    011E: ??                                    int 10h ; change cursor position
[ 150]    0120: ??                                    mov al, '-' ; character to print
[ 151]    0122: ??                                    mov bl, 00001001b; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 152]    0124: ??                                    mov bh, 0 ; print on  page 1
[ 153]    0126: ??                                    mov cx, 6 ; number of character to print
[ 154]    0129: ??                                    mov ah, 9 ; prepare interruption
[ 155]    012B: ??                                    int 10h ; printing
[ 156]    012D: ??                                    ret
[ 157]        :                                       print_next ENDP
[ 158]        :                                       
[ 159]    012E:                                       print_piano PROC
[ 160]    012E: ??                                    mov bx, offset column
[ 161]    0131: ??                                    mov [bx], 0
[ 162]    0134: ??                                    mov bx, offset key_off
[ 163]    0137: ??                                    mov [bx], 0; put the value to 0
[ 164]    013A: ??                                    mov dx, 0000h
[ 165]    013D: ??                                    mov bh, 0
[ 166]    013F: ??                                    mov ah, 2
[ 167]    0141: ??                                    int 10h ; puts the cursor on the first column, first row
[ 168]    0143: ??                                    mov cx, 0; use as a counter
[ 169]    0146:                                       key:
[ 170]    0146: ??                                    mov bx, offset color
[ 171]    0149: ??                                    mov [bx], 00001111b
[ 172]    014C: ??                                    mov bx, offset row
[ 173]    014F: ??                                    mov [bx], 0 ; restore the value of the row
[ 174]    0152: ??                                    mov bx, offset pressed_key
[ 175]    0155: ??                                    cmp [bx], cl
[ 176]    0157: ??                                    jnz continue:
[ 177]    0159: ??                                    mov bx, offset color
[ 178]    015C: ??                                    mov [bx], 00001100b
[ 179]    015F:                                       continue:
[ 180]    015F: ??                                    push cx ; save the value of the counter
[ 181]    0160: ??                                    call print_key
[ 182]    0163: ??                                    pop cx ; restore this value
[ 183]    0164: ??                                    mov bx, offset key_off
[ 184]    0167: ??                                    add [bx], 6 ; use to change key
[ 185]    016A: ??                                    inc cx
[ 186]    016B: ??                                    cmp cx, 12
[ 187]    016E: ??                                    jnz key ;loop
[ 188]        :                                       
[ 189]    0170: ??                                    mov dl, 0
[ 190]    0172: ??                                    mov dh, 14
[ 191]    0174: ??                                    mov bh, 0
[ 192]    0176: ??                                    mov ah, 2
[ 193]    0178: ??                                    int 10h  ; move cursor to the right position
[ 194]    017A: ??                                    mov al, ' ' ; character to print
[ 195]    017C: ??                                    mov bl, 0
[ 196]    017E: ??                                    mov bh, 0 ; print on  page 1
[ 197]    0180: ??                                    mov cx, 50h ; number of character to print
[ 198]    0183: ??                                    mov ah, 9 ; prepare interruption
[ 199]    0185: ??                                    int 10h ; printing
[ 200]    0187: ??                                    ret
[ 201]        :                                       print_piano ENDP
[ 202]        :                                       
[ 203]    0188:                                       print_key PROC
[ 204]    0188: ??                                    mov bx, offset key_off
[ 205]    018B: ??                                    mov dh, [bx]
[ 206]    018D: ??                                    mov bx, offset column
[ 207]    0190: ??                                    mov [bx], dh
[ 208]    0192: ??                                    mov dl, [bx] ; look which key to print (by looking which offset of key we have)
[ 209]    0194: ??                                    mov cx, 8
[ 210]    0197: ??                                    mov bx, offset row
[ 211]    019A: ??                                    mov dh, [bx] ; load cursor's row
[ 212]    019C: ??                                    mov bh, 0
[ 213]    019E: ??                                    mov ah, 2
[ 214]    01A0: ??                                    int 10h ; move the cursor to print this key
[ 215]    01A2: ??                                    call print_key_row ; call function
[ 216]    01A5: ??                                    mov cx, 12 ;use to loop
[ 217]    01A8:                                       etiq:
[ 218]    01A8: ??                                    mov bx, offset key_off
[ 219]    01AB: ??                                    mov dh, [bx]
[ 220]    01AD: ??                                    mov bx, offset column
[ 221]    01B0: ??                                    mov [bx], dh
[ 222]    01B2: ??                                    mov dl, [bx]
[ 223]    01B4: ??                                    mov bx, offset row ;restore the value
[ 224]    01B7: ??                                    inc [bx]
[ 225]    01B9: ??                                    mov dh, [bx]
[ 226]    01BB: ??                                    mov bh, 0
[ 227]    01BD: ??                                    mov ah, 2
[ 228]    01BF: ??                                    int 10h ;move cursor
[ 229]    01C1: ??                                    push cx ; store cx (modified in function)
[ 230]    01C2: ??                                    call print_key_row
[ 231]    01C5: ??                                    pop cx ;restore cx value
[ 232]    01C6: ??                                    dec cx
[ 233]    01C7: ??                                    cmp cx, 0
[ 234]    01CA: ??                                    jnz etiq ; loop while cx>0
[ 235]    01CC: ??                                    call print_key_end ; print end of the touch
[ 236]    01CF: ??                                    ret
[ 237]        :                                       print_key ENDP
[ 238]        :                                       
[ 239]    01D0:                                       print_key_end PROC
[ 240]        :                                       ;function printing the end of a keyboard
[ 241]    01D0: ??                                    mov bx, offset key_off
[ 242]    01D3: ??                                    mov dh, [bx]
[ 243]    01D5: ??                                    mov bx, offset column
[ 244]    01D8: ??                                    mov [bx], dh
[ 245]    01DA: ??                                    mov dl, [bx]
[ 246]    01DC: ??                                    mov bx, offset row
[ 247]    01DF: ??                                    inc [bx]
[ 248]    01E1: ??                                    mov dh, [bx]
[ 249]    01E3: ??                                    mov bh, 0
[ 250]    01E5: ??                                    mov ah, 2
[ 251]    01E7: ??                                    int 10h  ; move cursor to the right position
[ 252]    01E9: ??                                    mov al, '-' ; character to print
[ 253]    01EB: ??                                    mov bx, offset color
[ 254]    01EE: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 255]    01F0: ??                                    mov bh, 0 ; print on  page 1
[ 256]    01F2: ??                                    mov cx, 6 ; number of character to print
[ 257]    01F5: ??                                    mov ah, 9 ; prepare interruption
[ 258]    01F7: ??                                    int 10h ; printing
[ 259]    01F9: ??                                    ret
[ 260]        :                                       print_key_end ENDP
[ 261]        :                                       
[ 262]    01FA:                                       print_key_row PROC
[ 263]        :                                       ;function for printing a part of a keyboard
[ 264]    01FA: ??                                    mov al, '|' ; character to print
[ 265]    01FC: ??                                    mov bx, offset color
[ 266]    01FF: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 267]    0201: ??                                    mov bh, 0 ; print on  page 1
[ 268]    0203: ??                                    mov cx, 1 ; number of character to print
[ 269]    0206: ??                                    mov ah, 9 ; prepare interruption
[ 270]    0208: ??                                    int 10h ; printing
[ 271]    020A: ??                                    mov bx, offset column ; pick up the address of the column
[ 272]    020D: ??                                    inc [bx] ; add 1 to the column
[ 273]    020F: ??                                    mov dl, [bx] ;set the cursor position on the column
[ 274]    0211: ??                                    mov bh, 0 ; change page's 1 cursor
[ 275]    0213: ??                                    mov ah, 2 ; prepare interruption
[ 276]    0215: ??                                    int 10h ; change cursor position
[ 277]    0217: ??                                    mov al, ' '
[ 278]    0219: ??                                    mov bx, offset color
[ 279]    021C: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 280]    021E: ??                                    mov bh, 0 ; print on  page 1
[ 281]    0220: ??                                    mov cx, 4
[ 282]    0223: ??                                    mov ah, 9
[ 283]    0225: ??                                    int 10h
[ 284]    0227: ??                                    mov bx, offset column
[ 285]    022A: ??                                    add [bx], 4
[ 286]    022D: ??                                    mov dl, [bx]
[ 287]    022F: ??                                    mov bh, 0
[ 288]    0231: ??                                    mov ah, 2
[ 289]    0233: ??                                    int 10h
[ 290]    0235: ??                                    mov al, '|'
[ 291]    0237: ??                                    mov bx, offset color
[ 292]    023A: ??                                    mov bl,[bx]; set the color (4 MSB -> background color, 4 LSB-> foreground color)
[ 293]    023C: ??                                    mov bh, 0 ; print on  page 1
[ 294]    023E: ??                                    mov cx, 1
[ 295]    0241: ??                                    mov ah, 9
[ 296]    0243: ??                                    int 10h
[ 297]    0245: ??                                    ret
[ 298]        :                                       print_key_row ENDP
[ 299]        :                                       
[ 300]    0246: ??                                    color db 00001111b
[ 301]    0247: ??                                    column db 0 ; must change value in code to display other touch
[ 302]    0248: ??                                    row db 0
[ 303]    0249: ??                                    key_off db 0
[ 304]    024A: ??                                    pressed_key db 12h
[ 305]    024B: ??                                    next_key db 12h
[ 306]    024C: ??                                    piece1 db 5,5,5,7,9,7,5,9,7,7,5,5,5,5,7,9,7,5,9,7,7,5,7,7,7,7,2,2,7,5,4,2,0,5,5,5,7,9,7,5,9,7,7,5,13
[ 307]        :                                       
[ 308]        :                                       
 
===================================================================================================
 




===================================================================================================
